@charset 'utf-8';


/// Only display content when it’s focused.
///
/// @group helpers
///
/// Use in conjunction with ´@include visually-hidden;´ to only display
/// content when it's focused. Useful for "Skip to main content" links.
///
/// @link https://www.w3.org/WAI/WCAG21/Techniques/general/G1.html
///   - G1: Adding a link at the top of each page that goes directly to the main content area
///
/// Extending (@extend) is not possible across media contexts. Reasons why we cannot
/// extend across different media contexts are strictly technical at this point.
/// Still, this is something quite annoying to deal with. To work around this issue,
/// the less worse idea is to wrap placeholders with a mixin so you can choose either
/// to '@extend' or to '@include', depending on whether your in a '@media' block or not.
///
/// @param {Bool} $extend [true]
///   - Choose either to '@extend' or to '@include', depending on whether your
///     in a '@media' block or not.
///
/// @example scss - Default usage.
///   @use '[root_path]/_sass-framework/helpers/a11y';
///
///   .element {
///     @include a11y.visually-hidden;
///     @include a11y.focusable;
///   }
///
///   // CSS Output
///   //
///   .element {
///     position: absolute !important;
///     clip: rect(1px, 1px, 1px, 1px) !important;
///     ...
///     border: 0 !important;
///     white-space: nowrap !important;
///   }
///   .element:focus,
///   .element:active {
///     clip: auto !important;
///     clip-path: none !important;
///     overflow: visible !important;
///     width: auto !important;
///     height: auto !important;
///     white-space: normal !important;
///     z-index: 9999 !important;
///   }
///
/// @example scss - Usage across '@media' context.
///   @use '[root_path]/_sass-framework/helpers/a11y';
///
///   .element {
///     @include breakpoint.up('medium') {
///       @include a11y.visually-hidden($extend: false);
///       @include a11y.focusable($extend: false);
///     }
///   }
///
///   // CSS Output
///   //
///   @media (min-width: 768px) {
///     .element {
///       position: absolute !important;
///       clip: rect(1px, 1px, 1px, 1px) !important;
///       ...
///       border: 0 !important;
///       white-space: nowrap !important;
///     }
///     .element:focus,
///     .element:active {
///       clip: auto !important;
///       clip-path: none !important;
///       overflow: visible !important;
///       width: auto !important;
///       height: auto !important;
///       white-space: normal !important;
///       z-index: 9999 !important;
///     }
///   }
///
/// @require {placeholder} focusable-defaults

@mixin focusable(
  $extend: true
) {

  @if $extend {
    @extend %focusable-defaults;
  }
  @else {

    // Focus and active states
    //
    &:focus,
    &:active {
      clip: auto !important;
      clip-path: none !important;
      overflow: visible !important;
      width: auto !important;
      height: auto !important;
      white-space: normal !important;
      z-index: 9999 !important;
    }
  }
}
