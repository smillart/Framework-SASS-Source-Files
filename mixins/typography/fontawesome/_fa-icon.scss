@charset 'utf-8';


/// Font Awesome Free 5.13.1
///
/// You can place Font Awesome icons just about anywhere using the following Sass mixin.
/// Font Awesome is designed to be used with inline elements and we recommend sticking with
/// a consistent HTML element to reference them by in your project. We like the `<i>` tag for
/// brevity and for the fact that most folks are using `<em></em>` for emphasized/italicized
/// semantic text these days. If thatâ€™s not your cup of tea, using a `<span>` is more
/// semantically correct.
///
/// @group typography
///
/// @param {String} $icon
///   - The name of the expected icon.
///
/// @param {String} $type [solid]
///   - The name of Font Awesome family type.
///     Only `solid` (default), `regular` or `brands` are allowed values.
///
/// @param {Bool | String} $position [false]
///   - If needed, this will be the icon position.
///     Only `before` or `after` are allowed values.
///
/// @content
///   Any additional CSS properties that are included in the `@include`
///   directive will be output within the `Pseudo-element` declaration.
///
/// @example scss - Usage.
///   .element {
///     @include fa-icon('chevron-down', $position: 'after');
///   }
///
///   // CSS Output
///   //
///   .element::after {
///     -moz-osx-font-smoothing: grayscale;
///     -webkit-font-smoothing: antialiased;
///     display: inline-block;
///     font-style: normal;
///     font-variant: normal;
///     text-rendering: auto;
///     line-height: 1;
///   }
///   .element::after {
///     font-family: 'Font Awesome 5 Free';
///     font-weight: 900;
///   }
///   .element::after {
///     content: '\f078';
///   }
///
/// @requires {variable} fa-conversion-map
/// @requires {function} type-of
/// @requires {function} map-has-key
/// @requires {function} map-get
/// @requires {function} unquote
/// @requires {placeholder} icon-defaults
/// @requires {placeholder} icon-solid-defaults
/// @requires {placeholder} icon-regular-defaults
/// @requires {placeholder} icon-brands-defaults

@mixin fa-icon(
  $icon,
  $type: solid,
  $position: false
) {

  // Get the correct unicode value of any icon according to its key name.
  @if type-of($icon) == 'string' and map-has-key($fa-conversion-map, $icon) {
    $icon: map-get($fa-conversion-map, $icon);
  }
  @else {
    @error "Cannot convert `#{$icon}` to Font Awesome Free 5.13.1 icon name because it doesn't exist or seems to be an unexpected value.";
  }

  @if $position {

    // Pseudo-element position
    //
    &::#{$position} {
      @extend %icon-defaults;
      @extend %icon-#{$type}-defaults;
      content: unquote('\'#{$icon}\'');
      @content;
    }
  }
  @else {
    @extend %icon-defaults;
    @extend %icon-#{$type}-defaults;

    // Before selector
    //
    &::before {
      content: unquote('\'#{$icon}\'');
      @content;
    }
  }
}


/// Font Awesome Icons default properties.
///
/// @group typography

%icon-defaults {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  display: inline-block;
  font: {
    style: normal;
    variant: normal;
  }
  text-rendering: auto;
  line-height: 1;
}


/// Font Awesome "Solid" Icons properties.
///
/// @group typography

%icon-solid-defaults {
  font: {
    family: 'Font Awesome 5 Free';
    weight: 900;
  }
}


/// Font Awesome "Regular" Icons properties.
///
/// @group typography

%icon-regular-defaults {
  font: {
    family: 'Font Awesome 5 Free';
    weight: 400;
  }
}


/// Font Awesome "Brands" Icons properties.
///
/// @group typography

%icon-brands-defaults {
  font: {
    family: 'Font Awesome 5 Brands';
    weight: 400;
  }
}
