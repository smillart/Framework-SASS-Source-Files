@charset 'utf-8';


/// Buttons
///
/// Easily set out default styles for all buttons.
///
/// @group library
///
/// @param {Bool} $rounded [true]
///   - Enable or disable the border radius on buttons.
///
/// @param {Bool} $transition [true]
///   - Enable or disable the transitions when buttons state changes.
///
/// @param {Bool} $shadow [false]
///   - Enable or disable the box shadow on buttons.
///
/// @param {Number} $button-vertical-padding [0.375rem]
///   - The top/bottom (vertical) padding size to be applied on buttons.
///
/// @param {Number} $button-horizontal-padding [0.75rem]
///   - The right/left (horizontal) padding size to be applied on buttons.
///
/// @param {Color} $button-background-color [#f8f9fa]
///   - The background color to be applied on buttons.
///
/// @param {Number} $button-border-width [1px]
///   - The border width to be applied on buttons.
///
/// @param {String} $button-border-style [solid]
///   - The border style to be applied on buttons.
///
/// @param {Number} $button-border-radius [0.25rem]
///   - The border radius size to be applied on buttons.
///
/// @param {List} $button-transition [color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out]
///   - The transition properties to be applied on buttons.
///
/// @param {List} $button-focus-box-shadow [0 0 0 3px #00003340]
///   - The box shadow to be applied on buttons when focused.
///
/// @param {Number} $button-next-element-margin-left [0.25rem]
///   - The left margin size to be applied on any elements when immediately
///     after a button.
///
/// @param {Color} $button-disabled-opacity [0.65]
///   - The opacity to be applied on buttons when disabled.
///
/// @example scss - Usage.
///   .button {
///     @include button;
///   }
///
///   // CSS Output
///   //
///   .button {
///     padding: 0.375rem 0.75rem;
///     background-color: #f8f9fa;
///     display: inline-block;
///     border-width: 1px;
///     border-style: solid;
///     font-family: inherit;
///     ...
///     white-space: nowrap;
///     cursor: pointer;
///     user-select: none;
///     border-radius: 0.25rem;
///   }
///   .button:hover {
///     text-decoration: none;
///   }
///   ...
///
/// @requires {variable} enable-rounded
/// @requires {variable} enable-transitions
/// @requires {variable} enable-shadows
/// @requires {variable} component-vertical-paddings
/// @requires {variable} component-horizontal-paddings
/// @requires {variable} component-border-width
/// @requires {variable} component-border-style
/// @requires {variable} component-border-radiuses
/// @requires {variable} component-transitions
/// @requires {variable} component-box-shadows
/// @requires {mixin} rem
/// @requires {mixin} background

@mixin button(
  $rounded: $enable-rounded,
  $transition: $enable-transitions,
  $shadow: $enable-shadows,
  $button-vertical-padding: map-get($component-vertical-paddings, 'medium'),
  $button-horizontal-padding: map-get($component-horizontal-paddings, 'medium'),
  $button-background-color: map-get($component-state-background-colors, 'light'),
  $button-border-width: $component-border-width,
  $button-border-style: $component-border-style,
  $button-border-radius: map-get($component-border-radiuses, 'medium'),
  $button-transition: map-get($component-transitions, 'button'),
  $button-focus-box-shadow: map-get($component-box-shadows, 'focus'),
  $button-next-element-margin-left: map-get($component-margins, 'xsmall'),
  $button-disabled-opacity: 0.65
) {

  @include rem('padding', $button-vertical-padding $button-horizontal-padding);
  @include background($color: $button-background-color);
  display: inline-block;
  border: {
    @include rem('width', $button-border-width);
    style: $button-border-style;
  }
  color: inherit;
  font: {
    family: inherit;
    size: inherit;
    weight: inherit;
  }
  text: {
    align: center;
    decoration: none;
  }
  vertical-align: middle;
  white-space: nowrap;
  cursor: pointer;
  user-select: none;

  // Manually set `border-radius` to provide an override to the browser default.
  //
  @if $rounded {
    @include rem('border-radius', $button-border-radius);
  }
  @else {
    border-radius: 0; // Reset the browser default.
  }

  // Conditionally set a `transition`.
  //
  @if $transition {
    transition: $button-transition;
  }

  // Hover state
  //
  &:hover {
    text-decoration: none;
  }

  // Image type
  //
  &[type="image"] {
    padding: 0 !important;
    background: none !important;
    border: 0 none !important;
  }

  // Any elements when immediately after a button.
  //
  + * {
    @include rem('margin-left', $button-next-element-margin-left);
  }

  // Disabled
  //
  &:disabled {
    opacity: $button-disabled-opacity;
    box-shadow: none;
    cursor: not-allowed;
  }
}


/// Button variant
///
/// Easily set out variant styles on a specific button.
///
/// @group library
///
/// @param {String} $style
///   - The expected style to be applied.
///
/// @param {Bool} $shadow [false]
///   - Enable or disable the box shadow on button variants.
///
/// @param {Color} $button-variant-color [#eeeeee]
///   - The text color to be applied on button variants.
///
/// @param {Number} $button-variant-darken-pourcentage [15%]
///   - The darkening percentage to be applied on button variants when hovered.
///
/// @example scss - Usage.
///   .button--primary {
///     @include button-variant('primary');
///   }
///
///   // CSS Output
///   //
///   .button--primary {
///     background-color: #0071eb;
///     border-color: #0071eb;
///     color: #fff;
///   }
///   .button--primary:hover {
///     background-color: #000;
///     border-color: #000;
///     color: #fff;
///   }
///
/// @requires {variable} enable-shadows
/// @requires {variable} component-state-colors
/// @requires {function} theme-color
/// @requires {mixin} background

@mixin button-variant(
  $style,
  $shadow: $enable-shadows,
  $button-variant-color: map-get($component-state-colors, 'active'),
  $button-variant-darken-pourcentage: 15%
) {

  @if type-of($style) == 'string' and map-has-key($theme-colors, $style) {
    @include background($color: theme-color($style));
    border-color: theme-color($style);
    color: $button-variant-color;

    // Hover state
    //
    &:hover {
      @include background($color: darken(theme-color($style), $button-variant-darken-pourcentage));
      border-color: darken(theme-color($style), $button-variant-darken-pourcentage);
      color: $button-variant-color;
    }
  }
  @else {
    @warn "Unrecognized or missing style: '#{$style}'";
  }
}
