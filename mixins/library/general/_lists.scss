@charset 'utf-8';


/// Lists
///
/// Easily set out default styles for all lists.
///
/// @group library
///
/// @param {Number} $lists-padding-left [1.5rem]
///   - The left padding size applied on all lists.
///
/// @param {Number} $lists-margin-bottom [1rem]
///   - The bottom margin size applied on all lists.
///
/// @example scss - Usage.
///   ul {
///     @include lists;
///   }
///
///   // CSS Output
///   //
///   ul, ol {
///     padding-left: 1.5rem;
///     margin-bottom: 1rem;
///   }
///   ul ul, ul ol {
///     margin-bottom: 0;
///   }
///
/// @requires {variable} component-horizontal-paddings
/// @requires {variable} component-margins
/// @requires {mixin} rem

@mixin lists(
  $lists-padding-left: (map-get($component-horizontal-paddings, 'medium') * 2),
  $lists-margin-bottom: map-get($component-margins, 'medium')
) {

  @include rem('padding-left', $lists-padding-left);
  @include rem('margin-bottom', $lists-margin-bottom);

  // Nested unordered lists
  //
  ul {
    margin-bottom: 0;
  }

  // Nested ordered lists
  //
  ol {
    margin-bottom: 0;
  }
}


/// List variant
///
/// Easily set out variant styles on a specific list.
///
/// @group library
///
/// @param {String} $style
///   - The expected style to be applied.
///
/// @param {Number} $list-unstyled-padding-left [0]
///   - The left padding to be applied on the unstyled (un)ordered lists.
///
/// @param {String} $list-inline-item-vertical-align [top]
///   - The vertical alignment to be applied on all inline list items.
///
/// @param {Number} $list-inline-item-margin-left [1rem]
///   - The left margin to be applied on all inline list items (Excepted the first child).
///
/// @example scss - Usage.
///   .item-list ul {
///     @include list-variant('unstyled');
///   }
///   ul.links.inline {
///     @include list-variant('inline');
///   }
///
///   // CSS Output
///   //
///   .item-list ul {
///     padding-left: 0;
///     list-style: outside none none;
///   }
///   ul.links.inline {
///     padding-left: 0;
///     list-style: outside none none;
///   }
///   ul.links.inline > li {
///     display: inline-block;
///     vertical-align: top;
///   }
///   ul.links.inline > li:not(:first-child) {
///     margin-left: 1rem;
///   }
///
/// @requires {variable} component-margins
/// @requires {mixin} rem

@mixin list-variant(
  $style,
  $list-unstyled-padding-left: 0,
  $list-inline-item-vertical-align: top,
  $list-inline-item-margin-left: map-get($component-margins, 'medium')
) {

  @if $style == 'unstyled' or $style == 'inline' {
    @include rem('padding-left', $list-unstyled-padding-left);
    list-style: outside none none;

    @if $style == 'inline' {

      // List items (Immediate children)
      //
      > li {
        display: inline-block;
        vertical-align: $list-inline-item-vertical-align;

        // List items (Immediate children / Excepted the first child)
        //
        &:not(:first-child) {
          @include rem('margin-left', $list-inline-item-margin-left);
        }
      }
    }
  }
  @else {
    @warn "Unrecognized or missing style: '#{$style}'";
  }
}
