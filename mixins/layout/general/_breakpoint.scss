@charset 'utf-8';


/// Breakpoints are defined as a map of (name: minimum width),
/// order from small to large. The map defined in the `$grid-breakpoints`
/// global variable is used as the `$breakpoints` argument by default
/// when no argument is provided.


/// Generate Media Query of at least the minimum breakpoint width.
///
/// No query for the smallest (xsmall) breakpoint, makes the '@content'
/// apply to the given breakpoint and wider.
///
/// @group layout
///
/// @param {String} $name
///   - The name of the reference breakpoint.
///
/// @param {Map} $breakpoints [$grid-breakpoints]
///   - Map of all breakpoints to search in.
///
/// @content
///   Any CSS properties that are included in the '@include' directive will be
///   output within the `@media` declaration.
///
/// @example scss - Usage.
///   .element {
///     @include breakpoint-up('small', ('xsmall': 0, 'small': 576px, 'medium': 768px, 'large': 992px, 'xlarge': 1230px, 'xxlarge': 1540px)) {
///       ...
///     }
///   }
///
///   // CSS Output
///   //
///   @media (min-width: 576px) {
///     .element {
///       ...
///     }
///   }
///
/// @requires {function} breakpoint-min
/// @requires {variable} grid-breakpoints

@mixin breakpoint-up(
  $name,
  $breakpoints: $grid-breakpoints
) {

  $min: breakpoint-min($name, $breakpoints);

  @if $min {
    @media (min-width: $min) {
      @content;
    }
  }
  @else {
    @content;
  }
}


/// Generate Media Query of at most the maximum breakpoint width.
///
/// No query for the largest (xxlarge) breakpoint, makes the '@content'
/// apply to the given breakpoint and narrower.
///
/// @group layout
///
/// @param {String} $name
///   - The name of the reference breakpoint.
///
/// @param {Map} $breakpoints [$grid-breakpoints]
///   - Map of all breakpoints to search in.
///
/// @content
///   Any CSS properties that are included in the '@include' directive will be
///   output within the `@media` declaration.
///
/// @example scss - Usage.
///   .element {
///     @include breakpoint-down('large', ('xsmall': 0, 'small': 576px, 'medium': 768px, 'large': 992px, 'xlarge': 1230px, 'xxlarge': 1540px)) {
///       ...
///     }
///   }
///
///   // CSS Output
///   //
///   @media (max-width: 1199px) {
///     .element {
///       ...
///     }
///   }
///
/// @requires {function} breakpoint-max
/// @requires {variable} grid-breakpoints

@mixin breakpoint-down(
  $name,
  $breakpoints: $grid-breakpoints
) {

  $max: breakpoint-max($name, $breakpoints);

  @if $max {
    @media (max-width: $max) {
      @content;
    }
  }
  @else {
    @content;
  }
}


/// Generate Media Query that spans multiple breakpoint widths.
///
/// Makes the '@content' apply between the min and max breakpoints.
///
/// @group layout
///
/// @param {String} $lower
///   - Name of the minimum breakpoint.
///
/// @param {String} $upper
///   - Name of the maximum breakpoint.
///
/// @param {Map} $breakpoints [$grid-breakpoints]
///   - Map of all breakpoints to search in.
///
/// @content
///   Any CSS properties that are included in the '@include' directive will be
///   output within the `@media` declaration.
///
/// @example scss - Usage.
///   .element {
///     @include breakpoint-between('small', 'large', ('xsmall': 0, 'small': 576px, 'medium': 768px, 'large': 992px, 'xlarge': 1230px, 'xxlarge': 1540px)) {
///       ...
///     }
///   }
///
///   // CSS Output
///   //
///   @media (min-width: 576px) and (max-width: 991px) {
///     .element {
///       ...
///     }
///   }
///
/// @requires {function} breakpoint-min
/// @requires {function} breakpoint-max
/// @requires {variable} grid-breakpoints

@mixin breakpoint-between(
  $lower,
  $upper,
  $breakpoints: $grid-breakpoints
) {

  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);

  @media (min-width: $min) and (max-width: $max) {
    @content;
  }
}


/// Generate Media Query between the breakpointâ€™s minimum and maximum widths.
///
/// No minimum for the smallest (xsmall) breakpoint, and no maximum for the largest (xxlarge) one.
/// Makes the '@content' apply only to the given breakpoint, not viewports any wider or narrower.
///
/// @group layout
///
/// @param {String} $name
///   - The name of the reference breakpoint.
///
/// @param {Map} $breakpoints [$grid-breakpoints]
///   - Map of all breakpoints to search in.
///
/// @content
///   Any CSS properties that are included in the '@include' directive will be
///   output within the `@media` declaration.
///
/// @example scss - Usage.
///   .element {
///     @include breakpoint('small', ('xsmall': 0, 'small': 576px, 'medium': 768px, 'large': 992px, 'xlarge': 1230px, 'xxlarge': 1540px)) {
///       ...
///     }
///   }
///
///   // CSS Output
///   //
///   @media (min-width: 576px) and (max-width: 767px) {
///     .element {
///       ...
///     }
///   }
///
/// @requires {function} breakpoint-min
/// @requires {function} breakpoint-max
/// @requires {variable} grid-breakpoints
/// @requires {mixin} breakpoint-up
/// @requires {mixin} breakpoint-down

@mixin breakpoint(
  $name,
  $breakpoints: $grid-breakpoints
) {

  $min: breakpoint-min($name, $breakpoints);
  $max: breakpoint-max($name, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  }
  @else if $max == null {
    @include breakpoint-up($name);
  }
  @else if $min == null {
    @include breakpoint-down($name);
  }
}
