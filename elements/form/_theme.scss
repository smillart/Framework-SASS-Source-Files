@charset 'utf-8';
@use 'sass:meta';
@use 'sass:color';
@use '../../utilities/background';
@use '../../utilities/border';
@use '../../utilities/color' as _color;
@use '../../utilities/effect';
@use '../../options/enable/css' as *;
@use 'forms' as *;


/// Themed form element styles
///
/// Easily set out theme color styles on a specific form element.
/// Note: This mixin can have effect on `<input>`s, `<textarea>`s and `<select>`s.
///
/// @group elements
///
/// @param {String} $theme [primary]
///   - The theme colorâ€™s name to be applied on the themed form element.
///     Only the "Theme color scheme" Sass map values are allowed.
///
/// @param {Color} $background-color [white]
///   - The background color to be applied on themed form elements.
///
/// @param {Color} $border-color [#868e96]
///   - The border color to be applied on themed form elements.
///
/// @param {Bool} $shadows [false]
///   - Enable/disable the box shadow on form elements.
///
/// @param {Bool} $transitions [true]
///   - Enable/disable the transitions when the form elements state changes.
///
/// @param {Bool} $css-variables [false]
///   - Enable/disable the CSS variables.
///
/// @throw
///   Unrecognized or missing '#{$theme}' key in the 'Theme color scheme' Sass map.
///
/// @example scss - Usage.
///   @use '[root_path]/_sass-framework/elements/form';
///
///   .form {
///
///     &-text,
///     &-select {
///       @include form.styles;
///       @include form.control;
///       @include form.theme('primary');
///     }
///   }
///
///   // CSS Output
///   //
///   .form-text,
///   .form-select {
///     transition:
///       background-color 0.15s ease-in-out,
///       border-color 0.15s ease-in-out,
///       box-shadow 0.15s ease-in-out;
///   }
///   .form-text,
///   .form-select {
///     ...
///     background-color: white;
///     border-color: #868e96;
///   }
///   .form-text:focus:not(:disabled):not([readonly]),
///   .form-select:focus:not(:disabled):not([readonly]) {
///     border-color: #3194ff;
///     box-shadow: 0 0 0 3px rgba(0, 113, 235, 0.25);
///   }
///   .form-text:checked,
///   .form-select:checked {
///     background-color: #0071eb;
///     border-color: #0071eb;
///   }
///
/// @require {function} meta.type-of
/// @require {function} color.change
/// @require {function} _color.theme
/// @require {function} border.state
/// @require {function} background.state
/// @require {function} effect.shadow
/// @require {placeholder} form-defaults
/// @require {variable} form-element-enable-shadows
/// @require {variable} form-element-enable-transitions
/// @require {variable} form-element-theme-background-color
/// @require {variable} form-element-theme-border-color
/// @require {variable} css-variables

@mixin theme(
  $theme: 'primary',
  $background-color: $form-element-theme-background-color,
  $border-color: $form-element-theme-border-color,
  $shadows: $form-element-enable-shadows,
  $transitions: $form-element-enable-transitions,
  $css-variables: $css-variables
) {

  // Note: Custom variable values only support SassScript inside `#{}`.
  @if $css-variables {
    --form-element-background-color: #{$background-color};
    --form-element-border-color: #{$border-color};
  }
  @else {
    background-color: $background-color;
    border-color: $border-color;
  }

  // Get the theme color to be apply on the themed form control.
  @if meta.type-of($theme) == 'string' and _color.theme($theme) {

    // Focus state.
    //
    // Customize the `:focus` state to imitate native WebKit styles (Exepted when read-only and disabled).
    //
    &:focus:not(:disabled):not([readonly]) {

      // Set the color to be apply on the themed form elements when focused.
      $focus-border-color: if(border.state('#{$theme}-focus'), border.state('#{$theme}-focus'), border.state('focus'));

      // Note: Custom variable values only support SassScript inside `#{}`.
      @if $css-variables {
        --form-element-border-color: #{$focus-border-color};
      }
      @else {
        border-color: $focus-border-color;
      }

      // Avoid using mixin so we can pass custom focus shadow properly.
      $focus-box-shadow: if(effect.shadow('#{$theme}-focus'), effect.shadow('#{$theme}-focus'), effect.shadow('focus'));
      box-shadow: if($shadows, $focus-box-shadow, null);
    }

    // Checked state.
    //
    // Customize the `:checked` state to imitate native WebKit styles for check-list types.
    //
    &:checked {

      // Set the color to be apply on the themed check-list types when checked.
      $checked-background-color: if(background.state('#{$theme}-checked'), background.state('#{$theme}-checked'), background.state('checked'));
      $checked-border-color: if(border.state('#{$theme}-checked'), border.state('#{$theme}-checked'), border.state('checked'));

      // Note: Custom variable values only support SassScript inside `#{}`.
      @if $css-variables {
        --form-element-background-color: #{$checked-background-color};
        --form-element-border-color: #{$checked-border-color};
      }
      @else {
        background-color: $checked-background-color;
        border-color: $checked-border-color;
      }
    }
  }
  @else {
    @error "Unrecognized or missing '#{$theme}' key in the 'Theme color scheme' Sass map.";
  }

  // Conditionally set a `transition`.
  @if $transitions {
    @extend %form-defaults;
  }
}
