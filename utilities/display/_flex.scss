@charset 'utf-8';
@use 'sass:meta';
@use 'sass:map';


/// Flexbox Layout
///
/// Quickly manage the layout, alignment of navigation, components,
/// and more with a full suite of flexbox utilities.
/// Note: For the children properties, custom add CSS may be necessary.
///
/// @group utilities
///
/// @param {Bool | List} $aligns [left stretch]
///   - The expected values for defining the row alignment along/across
///     both horizontal & vertical axis.
///     - Horizontally: left (default), right, center, justify and distribute.
///     - Vertically: stretch (default), top, middle, bottom and baseline.
///
/// @param {List} $flow [row wrap]
///   - This is the shorthand 'flex-direction' and 'flex-wrap' properties,
///     which together define the flex container's main and cross axes.
///
/// @throw
///   Cannot convert '#{$align}' to flexbox syntax because it does not seem to be an expected value.
///
/// @example scss - Usage.
///   @use '[root_path]/_sass-framework/utilities/display';
///
///   .d-flex {
///     @include display.flex(justify middle);
///   }
///
///   // CSS Output
///   //
///   .d-flex {
///     position: relative;
///     display: flex;
///     flex-flow: row wrap;
///     justify-content: space-between;
///     align-items: center;
///   }
///
/// @require {function} meta.type-of
/// @require {function} map.has-key
/// @require {function} map.get

@mixin flex(
  $aligns: left stretch,
  $flow: row wrap
) {

  // Define some reusable flexbox container properties.
  $alignment-main-axis: justify-content;
  $alignment-cross-axis: align-items;

  // Define the map of 'flexbox syntax' conversion allowed values.
  $conversions: (
    'left': (
      'property': $alignment-main-axis,
      'value': flex-start,
    ),
    'right': (
      'property': $alignment-main-axis,
      'value': flex-end,
    ),
    'center': (
      'property': $alignment-main-axis,
      'value': center,
    ),
    'justify': (
      'property': $alignment-main-axis,
      'value': space-between,
    ),
    'distribute': (
      'property': $alignment-main-axis,
      'value': space-around,
    ),
    'stretch': (
      'property': $alignment-cross-axis,
      'value': stretch,
    ),
    'top': (
      'property': $alignment-cross-axis,
      'value': flex-start,
    ),
    'middle': (
      'property': $alignment-cross-axis,
      'value': center,
    ),
    'bottom': (
      'property': $alignment-cross-axis,
      'value': flex-end,
    ),
    'baseline': (
      'property': $alignment-cross-axis,
      'value': baseline,
    ),
  );

  position: relative;
  display: flex;
  flex-flow: $flow;

  @each $align in $aligns {

    @if meta.type-of($align) == 'string' and map.has-key($conversions, $align) {
      $alignments: map.get($conversions, $align);
      $property: map.get($alignments, 'property');
      $value: map.get($alignments, 'value');
      #{$property}: $value;
    }
    @else {
      @error "Cannot convert '#{$align}' to flexbox syntax because it does not seem to be an expected value.";
    }
  }
}
