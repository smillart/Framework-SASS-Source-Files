@charset 'utf-8';


/// Breakpoints are defined as a map of (name: minimum width),
/// order from small to large. The map defined in the `$grid-breakpoints`
/// global variable is used as the `$breakpoints` argument by default
/// when no argument is provided.


/// Retreive the name of the next breakpoint.
///
/// @group layout
///
/// @param {String} $name
///   - The name of the reference breakpoint.
///
/// @param {Map} $breakpoints [$grid-breakpoints]
///   - Map of all breakpoints to search in.
///
/// @param {Map} $breakpoint-names [map-keys($breakpoints)]
///   - Map of all breakpoint names.
///
/// @return {String | Null}
///
/// @example scss - Usage.
///   $next: breakpoint-next('small', ('xsmall': 0, 'small': 576px, 'medium': 768px, 'large': 992px, 'xlarge': 1230px), ('xsmall', 'small', 'medium', 'large', 'xlarge'));
///   => 'medium'
///
/// @requires {variable} grid-breakpoints
///
/// @access private

@function breakpoint-next(
  $name,
  $breakpoints: $grid-breakpoints,
  $breakpoint-names: map-keys($breakpoints)
) {

  $n: index($breakpoint-names, $name);
  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}


/// Retreive the minimum breakpoint width.
///
/// @group layout
///
/// @param {String} $name
///   - The name of the reference breakpoint.
///
/// @param {Map} $breakpoints [$grid-breakpoints]
///   - Map of all breakpoints to search in.
///
/// @return {Number | Null}
///
/// @example scss - Usage.
///   $minimum: breakpoint-min('small', ('xsmall': 0, 'small': 576px, 'medium': 768px, 'large': 992px, 'xlarge': 1230px));
///   => 576px
///
/// @requires {variable} grid-breakpoints
///
/// @access private

@function breakpoint-min(
  $name,
  $breakpoints: $grid-breakpoints
) {

  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}


/// Retreive the maximum breakpoint width.
///
/// @group layout
///
/// @param {String} $name
///   - The name of the reference breakpoint.
///
/// @param {Map} $breakpoints [$grid-breakpoints]
///   - Map of all breakpoints to search in.
///
/// @return {Number | Null}
///
/// @example scss - Usage.
///   $maximum: breakpoint-max('large', ('xsmall': 0, 'small': 576px, 'medium': 768px, 'large': 992px, 'xlarge': 1230px));
///   => 1199px
///
/// @requires {function} breakpoint-next
/// @requires {function} breakpoint-min
/// @requires {variable} grid-breakpoints
///
/// @access private

@function breakpoint-max(
  $name,
  $breakpoints: $grid-breakpoints
) {

  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - 1px, null);
}


/// Retreive a blank string if smallest (xsmall) breakpoint,
/// otherwise returns the name with a dash infront.
///
/// @group layout
///
/// @param {String} $name
///   - The name of the reference breakpoint.
///
/// @param {Map} $breakpoints [$grid-breakpoints]
///   - Map of all breakpoints to search in.
///
/// @return {String}
///
/// @example scss - Usage.
///   $infix: breakpoint-infix('xsmall', ('xsmall': 0, 'small': 576px, 'medium': 768px, 'large': 992px, 'xlarge': 1230px));
///   => ''  (Returns a blank string)
///   $infix: breakpoint-infix('small', ('xsmall': 0, 'small': 576px, 'medium': 768px, 'large': 992px, 'xlarge': 1230px));
///   => '-small'
///
/// @requires {function} breakpoint-min
/// @requires {variable} grid-breakpoints

@function breakpoint-infix(
  $name,
  $breakpoints: $grid-breakpoints
) {

  @return if(breakpoint-min($name, $breakpoints) == null, '', '-#{$name}');
}
