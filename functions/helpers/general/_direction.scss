@charset 'utf-8';


/// Test if `$value` is a valid direction.
///
/// @group helpers
///
/// @param {String | Number} $value
///   - The value to test.
///
/// @return {Bool}
///   - Is the direction valid?
///
/// @access private

@function is-direction(
  $value
) {

  $is-keyword: index(('to top' 'to top right' 'to right top' 'to right' 'to bottom right' 'to right bottom' 'to bottom' 'to bottom left' 'to left bottom' 'to left' 'to left top' 'to top left'), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

  @return $is-keyword or $is-angle;
}


/// Convert a direction to legacy syntax.
///
/// @group helpers
///
/// @param {String | Number} $value
///   - The value to convert.
///
/// @return {String | Number}
///   - The direction converted to legacy syntax.
///
/// @throw
///   Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.;
///
/// @requires {function} is-direction
/// @requires {function} map-has-key
/// @requires {function} map-get
///
/// @access private

@function legacy-direction(
  $value
) {

  @if is-direction($value) == false {
    @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
  }

  $conversion-map: (
  	'to top'          : bottom,
    'to top right'    : bottom left,
    'to right top'    : left bottom,
    'to right'        : left,
    'to bottom right' : top left,
    'to right bottom' : left top,
    'to bottom'       : top,
    'to bottom left'  : top right,
    'to left bottom'  : right top,
    'to left'         : right,
    'to left top'     : right bottom,
    'to top left'     : bottom right,
  );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }

  @return 90deg - $value;
}
